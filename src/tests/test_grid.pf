module test_grid
  use funit
  use mo_grid
  use mo_kind, only: dp, i4
  use mo_common_variables, only : Grid, GridRemapper

  implicit none

  private

  public :: test_set_domain_indices, test_init_lowres_level

  real :: t = 0.001

contains

  @test
  subroutine test_init_lowres_level()

    type(Grid) :: highres, res_lowres, ref_lowres
    type(GridRemapper) :: res_highres_lowres_remap, ref_highres_lowres_remap
    integer :: i, j
    logical, dimension(7) :: mask_val1 = [.true.,.false.,.false.,.false.,.true.,.true.,.false.]
    logical, dimension(7) :: mask_val2 = [.false.,.true.,.true.,.false.,.true.,.true.,.true.]

    highres%nrows = 6
    highres%ncols = 7
    highres%xllcorner = 3973
    highres%yllcorner = 2735
    highres%cellsize = 10 
    allocate(highres%mask(6,7))
    do i = 1, 3
      do j = 1, 7
        highres%mask(i,j) = mask_val1(j)
        highres%mask(i*2,j) = mask_val2(j)
      end do
    end do
    ref_lowres%nrows = 2
    ref_lowres%ncols = 2
    ref_lowres%xllcorner = 3893
    ref_lowres%yllcorner = 2705
    ref_lowres%cellsize = 50
    do i = 1, 4
      ref_lowres%cellCoor(i,1) = i
      ref_lowres%cellCoor(i,2) = i
    end do
    ref_lowres%CellArea(1) = 715
    ref_lowres%CellArea(2) = 45
    ref_lowres%CellArea(3) = 105
    ref_lowres%CellArea(4) = 30
    allocate(ref_highres_lowres_remap%lower_bound(4))
    allocate(ref_highres_lowres_remap%upper_bound(4))
    allocate(ref_highres_lowres_remap%left_bound(4))
    allocate(ref_highres_lowres_remap%right_bound(4))
    allocate(ref_highres_lowres_remap%n_subcells(4))
    allocate(ref_highres_lowres_remap%lowres_id_on_highres(4,2))
    ref_highres_lowres_remap%lower_bound = [5,6,5,6]
    ref_highres_lowres_remap%upper_bound = [1,6,1,6]
    ref_highres_lowres_remap%left_bound = [1,1,6,6]
    ref_highres_lowres_remap%right_bound = [5,5,7,7]
    ref_highres_lowres_remap%n_subcells = [13,3,7,2]
    ref_highres_lowres_remap%lowres_id_on_highres(1:5,1:5) = 1
    ref_highres_lowres_remap%lowres_id_on_highres(1:5,6:7) = 3
    ref_highres_lowres_remap%lowres_id_on_highres(6:6,1:5) = 2
    ref_highres_lowres_remap%lowres_id_on_highres(6:6,6:7) = 4

    call init_lowres_level(highres, 50.0_dp, res_lowres, res_highres_lowres_remap)  
    @assertEqual(ref_lowres, res_lowres, tolerance=t, message='init_lowres_level, lowres: with remap')
    @assertEqual(ref_highres_lowres_remap, res_highres_lowres_remap, tolerance=t, message='init_lowres_level, hlr: with remap')

  end subroutine test_init_lowres_level


  @test
  subroutine test_set_domain_indices()

    type(Grid), dimension(2) :: res_grids, ref_grids
    integer(i4), dimension(2) :: indices = [1,2]

    res_grids(1)%nCells = 46545_i4
    res_grids(2)%nCells = 21025_i4
    res_grids(1)%iStart = 538976288_i4
    res_grids(1)%iEnd = 538976288_i4
    res_grids(2)%iStart = 538976288_i4
    res_grids(2)%iEnd = 538976288_i4

    ref_grids(1)%nCells = 46545_i4
    ref_grids(2)%nCells = 21025_i4
    ref_grids(1)%iStart = 1_i4
    ref_grids(1)%iEnd = 46545_i4
    ref_grids(2)%iStart = 46546_i4
    ref_grids(2)%iEnd = 67570_i4

    call set_domain_indices(res_grids)
    @assertEqual(ref_grids, res_grids, tolerance=t, message='set_domain_indices, iStart: without indices')

    res_grids(1)%iStart = 538976288_i4
    res_grids(1)%iEnd = 538976288_i4
    res_grids(2)%iStart = 538976288_i4
    res_grids(2)%iEnd = 538976288_i4

    call set_domain_indices(res_grids, indices)
    @assertEqual(ref_grids, res_grids, tolerance=t, message='set_domain_indices, iStart: with indices')

  end subroutine test_set_domain_indices

end module test_grid