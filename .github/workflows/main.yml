name: Continuous Integration

on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:
    branches:
      - "develop"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  try_win:
    name: try_win_deps
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          path-type: inherit
          install: >-
            git
            make
          # m4 # <-- causing problems in netcdf-fortran/docs
          pacboy: >-
            toolchain:p
            cmake:p
            ninja:p
            netcdf:p

      - name: install_deps
        env:
          FC: gfortran
          CC: gcc
          CXX: g++
        run: |
          nc-config --all
          # source CI-scripts/install-deps -p ./test_deps
          git clone --depth 1 --branch v4.6.1 https://github.com/Unidata/netcdf-fortran.git
          cd netcdf-fortran
          cmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$(nc-config --prefix)" -DCMAKE_INSTALL_PREFIX="$(nc-config --prefix)" -D BUILD_V2=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_GNUtoMS=ON
          cmake --build build --config Release --target install
          nf-config --all
          cd ..
          cmake -GNinja -Bbuild
          cmake --build build --parallel
          ./build/mhm

  # build_sdist:
  #   name: sdist
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: '0'

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.9

  #     - name: Build sdist
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install build
  #         python -m build --sdist

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: dist/*.tar.gz

  # build_wheels:
  #   name: wheels for ${{ matrix.cfg.os }} / ${{ matrix.cfg.arch }}
  #   runs-on: ${{ matrix.cfg.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       cfg:
  #       - { os: ubuntu-latest, arch: x86_64 }
  #       - { os: macos-latest, arch: x86_64 }

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: '0'

  #     - name: Build wheels
  #       uses: pypa/cibuildwheel@v2.11.2
  #       env:
  #         CIBW_ARCHS: ${{ matrix.cfg.arch }}
  #       with:
  #         output-dir: dist

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: ./dist/*.whl

  # upload_to_pypi:
  #   needs: [build_wheels, build_sdist]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist

  #     - name: Publish to Test PyPI
  #       # only if working on main
  #       if: github.ref == 'refs/heads/develop'
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.test_pypi_api_token }}
  #         repository_url: https://test.pypi.org/legacy/
  #         skip_existing: true

  #     - name: Publish to PyPI
  #       # only if tagged
  #       if: startsWith(github.ref, 'refs/tags')
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.pypi_api_token }}
